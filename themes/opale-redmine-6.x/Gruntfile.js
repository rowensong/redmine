const livereloadPort = parseInt(process.env.LIVERELOAD_PORT || "35731", 10);

module.exports = function (grunt) {
  // 오류 처리 개선
  grunt.event.on("watch", function (action, filepath, target) {
    grunt.log.writeln("File " + filepath + " has " + action);
  });

  // Sass 컴파일 오류 처리
  grunt.event.on("sass:error", function (error) {
    grunt.log.error("❌ Sass compilation error:");
    grunt.log.error("Message: " + error.message);
    if (error.file) {
      grunt.log.error("File: " + error.file);
    }
    if (error.line) {
      grunt.log.error("Line: " + error.line);
    }
    if (error.column) {
      grunt.log.error("Column: " + error.column);
    }
  });

  // Shell 태스크 오류 처리 (Sass 컴파일 실패 시)
  grunt.event.on("shell.sass", function (result) {
    if (result && result.code !== 0) {
      grunt.log.error("❌ Sass CLI failed with exit code: " + result.code);
      if (result.stderr) {
        grunt.log.error("Stderr: " + result.stderr);
      }
      if (result.stdout) {
        grunt.log.write("Stdout: " + result.stdout);
      }
    }
  });
  grunt.initConfig({
    src: "src/",

    sass: {
      options: {
        implementation: require("sass"),
        sourceMap: false,
        outputStyle: "compressed",
        quietDeps: false,
        loadPaths: [],
        precision: 8,
        banner: "/* Generated by Grunt Sass */\n",
      },

      theme: {
        files: {
          "stylesheets/application.css": "<%= src %>sass/application.scss",
        },
        options: {
          verbose: true,
        },
      },
    },

    copy: {
      js: {
        files: [
          {
            expand: true,
            cwd: "<%= src %>js",
            src: ["**/*.js"],
            dest: "javascripts/",
          },
        ],
      },
      images: {
        files: [
          {
            expand: true,
            cwd: "<%= src %>images",
            src: ["**/*"],
            dest: "images/",
          },
        ],
      },
    },

    // BrowserSync는 제거(포트 3000에서 rack-livereload 사용)

    postcss: {
      options: {
        processors: [require("autoprefixer")()],
      },

      all: {
        src: ["stylesheets/*.css", "plugins/**/*.css"],
      },
    },

    shell: {
      options: {
        stdout: true,
        stderr: true,
        failOnError: false,
        execOptions: {
          stdio: "inherit",
        },
      },
      sass: {
        command:
          "npx sass --style=compressed --trace src/sass/application.scss:stylesheets/application.css",
      },
    },

    watch: {
      options: {
        interval: 500,
        debounceDelay: 300,
        spawn: true,
        livereload: false,
        atBegin: false,
        interrupt: false,
        reload: false,
      },
      css: {
        files: ["<%= src %>sass/**/*.scss"],
        tasks: ["css"],
        options: {
          verbose: true,
          livereload: false,
        },
      },
      css_out: {
        files: ["stylesheets/*.css"],
        options: {
          livereload: livereloadPort,
          verbose: true,
        },
      },
      js: {
        files: ["<%= src %>js/**/*.js"],
        tasks: ["copy:js"],
        options: {
          verbose: true,
        },
      },
    },
  });

  grunt.loadNpmTasks("grunt-sass");
  grunt.loadNpmTasks("@lodder/grunt-postcss");
  grunt.loadNpmTasks("grunt-contrib-watch");
  grunt.loadNpmTasks("grunt-contrib-copy");
  grunt.loadNpmTasks("grunt-shell");

  grunt.registerTask("css", ["shell:sass", "postcss"]);

  // CSS 빌드 태스크에 로깅 추가
  grunt.registerTask("css:verbose", function () {
    grunt.log.writeln("Starting CSS compilation...");
    grunt.task.run("shell:sass");
    grunt.log.writeln("Sass compilation completed.");
    grunt.task.run("postcss");
    grunt.log.writeln("PostCSS processing completed.");
    grunt.log.ok("CSS build finished successfully!");
  });

  grunt.registerTask("default", ["css", "copy:js", "copy:images"]);
};
